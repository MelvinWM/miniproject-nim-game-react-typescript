{"version":3,"sources":["matchstick.svg","NimHeap.tsx","NimBoard.tsx","NimGameStatusInfo.tsx","GameEndedStatus.ts","NimGame.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","NimHeap","props","state","indexHighlighted","matchsticks","Array","from","this","numberOfMatchsticks","keys","map","i","backgroundColor","key","className","src","matchstick","alt","onMouseEnter","setState","onMouseLeave","onClick","style","React","Component","NimBoard","nimHeapsNumberOfMatchsticks","index","renderNimHeap","matchesToSubtract","onNimHeapClick","heapIndex","handleNimHeapClick","NimGameStatusInfo","isPlayer1sTurn","gameEndedStatus","isPlayer1","every","sticks","kind","player1Winner","statusText","NimGame","history","stepNumber","currentHistorySlice","getCurrentHistorySlice","getIsPlayer1","nimHeapIndex","newHistory","copiedHeaps","slice","newHistorySlice","concat","renderNimGameHistory","newStepNumber","historySlice","description","listItemTextColor","color","rewindState","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.87e84051.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/matchstick.2490c66d.svg\";","\nimport React from 'react';\n\nimport './NimHeap.css';\nimport matchstick from './matchstick.svg';\n\nexport interface NimHeapProps {\n  readonly numberOfMatchsticks: number;\n  readonly onClick: (matchesToSubtract: number) => void,\n}\n\ninterface NimHeapState {\n  // Highlight when hovering over matchstick to show how many\n  // matchsticks will be taken when clicked.\n  readonly indexHighlighted: number;\n}\n\nexport class NimHeap extends React.Component<NimHeapProps, NimHeapState> {\n\n  constructor(props: NimHeapProps) {\n    super(props);\n\n    this.state = {\n      indexHighlighted: -1,\n    };\n  }\n\n  render() {\n\n    const matchsticks = Array\n      .from(Array(this.props.numberOfMatchsticks).keys())\n      .map(i => {\n\n        const backgroundColor = i <= this.state.indexHighlighted ?\n          \"#282c34\" :\n          \"transparent\";\n\n        return (\n          <img\n            key={this.props.numberOfMatchsticks - i}\n\n            className=\"NimHeap-matchstick-image\" src={matchstick} alt=\"matchstick\"\n\n            // TODO: As of Chromium version 83, there might be issues with 'onMouseEnter'\n            //   not being called when the element itself is moved under the cursor.\n            //   See for instance http://jsfiddle.net/r8rckL34/4/ .\n            //   This author is not quite sure how best to handle or mitigate this.\n\n            onMouseEnter={() => this.setState({indexHighlighted: i})}\n            onMouseLeave={() => this.setState({indexHighlighted: -1})}\n\n            onClick={() => {\n\n              this.setState({\n                indexHighlighted: -1,\n              });\n\n              this.props.onClick(i + 1);\n            }}\n\n            style={{backgroundColor: backgroundColor}}\n          />\n        );\n      });\n\n    return (\n      <div>\n        {matchsticks}\n      </div>\n    );\n  }\n}\n\n","\nimport React from 'react';\n\nimport './NimBoard.css';\n\nimport { NimHeap } from \"./NimHeap\";\n\nexport interface NimBoardProps {\n  readonly nimHeapsNumberOfMatchsticks: Array<number>;\n  readonly onNimHeapClick: (matchesToSubtract: number, nimHeapIndex: number) => void;\n  readonly isPlayer1: boolean;\n}\n\ninterface NimBoardState {\n}\n\nexport class NimBoard extends React.Component<NimBoardProps, NimBoardState> {\n\n  render() {\n\n    return (\n\n      <div>\n        <div>\n          {\n            this.props.nimHeapsNumberOfMatchsticks.map((numberOfMatchsticks, index) => {\n              return NimBoard.renderNimHeap(\n                index,\n                numberOfMatchsticks,\n                (matchesToSubtract: number) => this.props.onNimHeapClick(matchesToSubtract, index)\n              );\n            })\n          }\n        </div>\n      </div>\n    );\n  }\n\n  private static renderNimHeap(\n    heapIndex: number,\n    numberOfMatchsticks: number,\n    handleNimHeapClick: (matchesToSubtract: number) => void,\n  ) {\n\n    return (\n      <div\n        key={heapIndex}\n        className=\"NimBoard-nim-heap-row\"\n      >\n        <NimHeap\n          numberOfMatchsticks={numberOfMatchsticks}\n          onClick={handleNimHeapClick}\n        />\n      </div>\n    );\n  }\n}\n\n","\nimport React from 'react';\n\nimport { getGameEndedStatus } from \"./GameEndedStatus\";\n\ninterface NimGameStatusInfoProps {\n\n  readonly nimHeapsNumberOfMatchsticks: Array<number>;\n  readonly isPlayer1: boolean;\n}\n\nexport class NimGameStatusInfo extends React.Component<NimGameStatusInfoProps> {\n\n  render() {\n\n    const gameEndedStatus = getGameEndedStatus(\n      this.props.nimHeapsNumberOfMatchsticks,\n      this.props.isPlayer1\n    );\n\n    const statusText = (() => {\n      switch (gameEndedStatus.kind) {\n        case \"gamenotended\": return `Next player: ${this.props.isPlayer1 ? \"1\" : \"2\"}.`;\n        case \"gameended\": return `Player ${gameEndedStatus.player1Winner ? \"1\" : \"2\"} won!`;\n      }\n    })();\n\n    return (\n      <div>{statusText}</div>\n    );\n  }\n}\n\n","\n// Tagged union pattern.\n\nexport type GameEndedStatus =\n  GameNotEnded |\n  GameEnded;\n\nexport interface GameNotEnded {\n  kind: \"gamenotended\";\n}\n\nexport interface GameEnded {\n  kind: \"gameended\";\n  player1Winner: boolean;\n}\n\nexport function getGameEndedStatus(\n  nimHeapsNumberOfMatchsticks: Array<number>,\n  isPlayer1sTurn: boolean\n): GameEndedStatus {\n\n  if (nimHeapsNumberOfMatchsticks.every(sticks => sticks === 0)) {\n    return {\n      kind: \"gameended\",\n      // This is decided by whether it is \"misère\" or \"normal\". Here it is\n      // misère, since Wikipedia claims that is the typical mode.\n      player1Winner: isPlayer1sTurn,\n    };\n  }\n  return {\n    kind: \"gamenotended\",\n  };\n}\n\n","\nimport React from 'react';\n\nimport './NimGame.css';\n\nimport { NimBoard } from \"./NimBoard\";\nimport { NimGameStatusInfo } from \"./NimGameStatusInfo\";\n\ninterface NimHistorySlice {\n  readonly nimHeapsNumberOfMatchsticks: Array<number>;\n}\n\ninterface NimGameProps {\n\n}\n\ninterface NimGameState {\n  // May not be empty. First element is initial state.\n  readonly history: Array<NimHistorySlice>;\n  // Step number 0 is game start.\n  readonly stepNumber: number;\n}\n\nexport class NimGame extends React.Component<NimGameProps, NimGameState> {\n\n  constructor(props: NimGameProps) {\n    super(props);\n\n    this.state = {\n      history: [\n        {\n          nimHeapsNumberOfMatchsticks: [1, 2, 3, 4, 5],\n        },\n      ],\n      stepNumber: 0,\n    };\n  }\n\n  render() {\n\n    const currentHistorySlice = this.getCurrentHistorySlice();\n    const isPlayer1 = this.getIsPlayer1();\n\n    return (\n      <div>\n\n        <div className=\"NimGame-split NimGame-left\">\n          <NimGameStatusInfo\n            nimHeapsNumberOfMatchsticks={currentHistorySlice.nimHeapsNumberOfMatchsticks}\n\n            isPlayer1={isPlayer1}\n          />\n          <NimBoard\n            nimHeapsNumberOfMatchsticks={currentHistorySlice.nimHeapsNumberOfMatchsticks}\n\n            onNimHeapClick={\n              (matchesToSubtract: number, nimHeapIndex: number) => {\n\n                const copiedHeaps = currentHistorySlice.nimHeapsNumberOfMatchsticks.slice();\n                copiedHeaps[nimHeapIndex] = copiedHeaps[nimHeapIndex] - matchesToSubtract;\n\n                let newHistory: Array<NimHistorySlice>;\n                {\n                  const historyUntilAndWithCurrentHistorySlice = this.state.history.slice(0, this.state.stepNumber + 1);\n                  const newHistorySlice = {\n                    nimHeapsNumberOfMatchsticks: copiedHeaps,\n                  };\n                  newHistory = historyUntilAndWithCurrentHistorySlice.concat([newHistorySlice]);\n                }\n\n                this.setState({\n                  history: newHistory,\n                  stepNumber: this.state.stepNumber + 1,\n                });\n              }\n            }\n\n            isPlayer1={isPlayer1}\n          />\n        </div>\n\n        <div className=\"NimGame-split NimGame-right\">\n          <div>Game history</div>\n          <ul className=\"NimGame-history-list\">{this.renderNimGameHistory()}</ul>\n        </div>\n\n      </div>\n    );\n  }\n\n  private getCurrentHistorySlice() {\n    return this.state.history[this.state.stepNumber];\n  }\n\n  private getIsPlayer1() {\n    return this.state.stepNumber % 2 === 0;\n  }\n\n  private rewindState(newStepNumber: number) {\n    this.setState({\n      stepNumber: newStepNumber,\n    });\n  }\n\n  private renderNimGameHistory() {\n    return this.state.history.map((historySlice, index) => {\n\n      const description = index === 0 ?\n        \"Go to game start.\" :\n        `Go to move #${index}.`;\n\n      const listItemTextColor = index === this.state.stepNumber ?\n        \"white\" :\n        \"gray\";\n\n      return (\n        <li\n          className=\"NimGame-history-list-item\"\n          key={index}\n          style={{color: listItemTextColor}}\n          onClick={() => this.rewindState(index)}\n        >\n          {description}\n        </li>\n      );\n    });\n  }\n}\n\n","\nimport React from 'react';\n\nimport './App.css';\n\nimport { NimGame } from \"./NimGame\";\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n\n      <header className=\"App-header\">\n        <p>\n          Nim game\n        </p>\n      </header>\n\n      <main className=\"App-main\">\n        <NimGame />\n      </main>\n\n    </div>\n  );\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n"],"sourceRoot":""}